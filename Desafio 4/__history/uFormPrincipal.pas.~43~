unit uFormPrincipal;

{
  Levando em consideração o cardápio:
  Produto            Código     Preço
  Cachorro quente    100        9,50
  Bauru simples      101        10,50
  Bauru com ovo      102        12,50
  Hambúrger          103        9,50
  Cheeseburguer      104        10,50
  Refrigerante       105        5,00



  Escreva uma aplicação que receba o código do item, a quantidade, calcule
  o valor total do item e ao fechar o pedido exibir o valor a ser pago.
}

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.Bind.EngExt,
  Vcl.Bind.DBEngExt, System.Rtti, System.Bindings.Outputs, Vcl.Bind.Editors,
  Data.Bind.Components, Vcl.FileCtrl, Vcl.Buttons, Vcl.ExtCtrls,
  StrUtils, Contnrs, Generics.Defaults, Generics.Collections, Produto;

type
  TFrmPrincipal = class(TForm)
    EdtCodigo: TEdit;
    LblProduto: TLabel;
    LblCodigo: TLabel;
    EdtQuantidade: TEdit;
    LblQuantidade: TLabel;
    BtnFinalizar: TButton;
    MemResultado: TMemo;
    FilterComboBoxProduto: TFilterComboBox;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    BitBtnInserir: TBitBtn;
    BitBtnRemover: TBitBtn;
    ListBox1: TListBox;
    procedure BtnFinalizarClick(Sender: TObject);
    procedure FilterComboBoxProdutoChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FilterComboBoxProdutoEnter(Sender: TObject);
    procedure BitBtnInserirClick(Sender: TObject);
  private
    function ResultadoPedido(Quantidade: Integer; Valor: Currency): Currency;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmPrincipal: TFrmPrincipal;

implementation


{$R *.dfm}

{ TODO 1 : Fazer com objetos }
procedure TFrmPrincipal.BitBtnInserirClick(Sender: TObject);
var
  Produto: TProduto;
begin
  { Criamos aqui um primeiro objeto e armazenamos na posição 1,1 }

   Produto := TCliente.Create;

   Produto.Codigo := '1';

   Produto.Nome := 'Wesley Y';

   Produto.Sexo := 'M';

   StringGrid1.Objects[1,1] := Produto;

   StringGrid1.Cells[1,1] := Produto.Nome;



{ Criamos aqui um segundo objeto e armazenamos na posição 1,2 }

   C Produto= TCliente.Create;

   C.Produtoodigo := '2';

   C.Produtoome := 'Waleska';

   C.Produtoexo := 'F';

   StringGrid1.Objects[1,2] := C;Produto

   StringGrid1.Cells[1,2] := CProdutoNome;
end;

procedure TFrmPrincipal.BtnFinalizarClick(Sender: TObject);
var
  vDict: TDictionary<Integer, string>;
  I: Integer; // Código
  Quantidade: Integer;
  Resultado: Currency;
begin
  MemResultado.Clear;
  vDict := TDictionary<Integer, string>.Create();
  try
    vDict.Add(100, 'Cachorro quente');
    vDict.AddOrSetValue(101, 'Bauru simples');
    vDict.AddOrSetValue(102, 'Bauru com ovo');
    vDict.AddOrSetValue(103, 'Hambúrger');
    vDict.AddOrSetValue(104, 'Cheeseburguer');
    vDict.AddOrSetValue(105, 'Refrigerante');

    I := StrToInt(EdtCodigo.Text);
    Quantidade := StrToInt(EdtQuantidade.Text);

    if vDict.ContainsKey(I) then
    begin
      MemResultado.Lines.Add('Produto: ' + vDict.Items[I]);
      MemResultado.Lines.Add('Quantidade: ' + IntToStr(Quantidade));
      case I of
        100:
        begin
          Resultado := ResultadoPedido(Quantidade, 9.50);
          //CmbBoxProduto.Text := vDict.Items[I];
        end;

        101:
          Resultado := ResultadoPedido(Quantidade, 10.50);
        102:
          Resultado := ResultadoPedido(Quantidade, 12.50);
        103:
          Resultado := ResultadoPedido(Quantidade, 9.50);
        104:
          Resultado := ResultadoPedido(Quantidade, 10.50);
        105:
          Resultado := ResultadoPedido(Quantidade, 5.00);
      end;
      MemResultado.Lines.Add('Valor Final: ' + CurrToStrF(Resultado, ffCurrency, 2));
      //FloatToSTrf(r,ffCurrency,18,2)
    end
    else
      ShowMessage('Código não encontrado.');

  finally
    vDict.Free;
  end;

end;

procedure TFrmPrincipal.FilterComboBoxProdutoChange(Sender: TObject);
begin
  //FileListBox1.Mask := FilterComboBox1.Mask;
  //FilterComboBoxProduto.Mask :=
end;

procedure TFrmPrincipal.FilterComboBoxProdutoEnter(Sender: TObject);
begin
  //vaijá
end;

procedure TFrmPrincipal.FormCreate(Sender: TObject);
begin
  FilterComboBoxProduto.Filter := 'All files (*.*)|*.*| Pascal files (*.pas)|*.pas';
  //FilterComboBoxProduto.FileList
end;

function TFrmPrincipal.ResultadoPedido(Quantidade: Integer; Valor: Currency): Currency;
begin
  Result := Quantidade * Valor;
end;

end.
