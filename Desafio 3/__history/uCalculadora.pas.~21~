unit uCalculadora;

interface

type
  TCalculadora = class
  private
    FValorCapital, FJurosSimples, FMontanteSimples, FMontanteComposto: Currency;
    FTaxaJuros: Double;
    FTempo: Integer;

    procedure SetValorCapital(const Value: Currency);
    procedure SetTaxaJuros(const Value: Double);
    procedure SetTempo(const Value: Integer);
    procedure TCalculadora.CalculaParcelas(ValorCapital: Currency);

  public
    function CalculaJurosSimples(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;
    function CalculaMontanteSimples(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;
    function CalculaMontanteComposto(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;

    property ValorCapital: Currency read FValorCapital write SetValorCapital;
    property TaxaJuros: Double read FTaxaJuros write SetTaxaJuros;
    property Tempo: Integer read FTempo write SetTempo;

  end;

implementation
{ TCalculadora }
uses
  Math;

procedure TCalculadora.SetValorCapital(const Value: Currency);
begin
  FValorCapital := Value;
end;

procedure TCalculadora.SetTaxaJuros(const Value: Double);
begin
  FTaxaJuros := Value;
end;

procedure TCalculadora.SetTempo(const Value: Integer);
begin
  FTempo := Value;
end;

procedure TCalculadora.CalculaParcelas(ValorCapital: Currency);
var
  ParcelaSimples, ParcelaComposta, CapitalInicial: Currency;
  I: Integer;
begin
  ParcelaSimples := ValorCapital;
  ParcelaComposta := ValorCapital;
  CapitalInicial := ValorCapital;
  //Atribui informações
  //ProgressBar1.Max := 20;
  for I := 1 to Tempo do
  begin
    // Incrementa parcela de juros composto para tabela
    ParcelaComposta := ParcelaComposta + (ParcelaComposta * TaxaJuros);
    // Incrementa parcela de juros simples para tabela
    ParcelaSimples := ParcelaSimples + (CapitalInicial * TaxaJuros);

    StrGridParcelas.Cells[0,I] := IntToStr(I);
    StrGridParcelas.Cells[1,I] := CurrToStrF(ParcelaComposta, ffCurrency, 2);
    StrGridParcelas.Cells[2,I] := CurrToStrF(ParcelaSimples, ffCurrency, 2);
    //.Position := ProgressBar1.Position +1;
    Application.ProcessMessages;
    //Sleep(100);
  end;
end;

function TCalculadora.CalculaJurosSimples(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;
begin
  Result := ValorCapital * TaxaJuros * Tempo; // J = C.i.t
end;

function TCalculadora.CalculaMontanteSimples(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;
begin
  Result := ValorCapital + CalculaJurosSimples(ValorCapital,TaxaJuros, Tempo); // M = C + J
end;

function TCalculadora.CalculaMontanteComposto(ValorCapital: Currency; TaxaJuros: Double; Tempo: Integer): Currency;
begin
  Result := ValorCapital * (Power((1 + TaxaJuros), Tempo)); // M = C (1 + i)^t
end;

end.
